!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -std=gnu99 -lpthread -fstrict-overflow -Werror -Wall -Wshadow -pedantic -I$(CURDIR)$/;"	m
DB_H	db.h	2;"	d
DEPS	Makefile	/^DEPS := $(OBJ_SEQ:.o=.d)$/;"	m
EM_H	emsim.h	2;"	d
EM_REF_H	emsim_ref.h	2;"	d
FP	db.c	/^char* FP;$/;"	v
FULLY_WITHIN	sqlite3.h	7535;"	d
LDFLAGS	Makefile	/^LDFLAGS = libsqlite3.a -lm -lpthread -lrt -ldl$/;"	m
MAXNUMTHREADS	db.c	8;"	d	file:
NAME	Makefile	/^NAME = emsim$/;"	m
NOT_WITHIN	sqlite3.h	7533;"	d
NUMGAMES	unit_test.c	3;"	d	file:
NUMGROUPS	emsim.h	13;"	d
NUMGROUPS	unit_test.c	5;"	d	file:
NUMTEAMS	emsim.h	12;"	d
NUMTEAMS	unit_test.c	4;"	d	file:
NUMTHIRDS	emsim.h	14;"	d
NUMTHREADS	emsim.h	15;"	d
OBJ_CHECKS	Makefile	/^OBJ_CHECKS = $(SDIR)\/main.o $(SDIR)\/db_dummy.o $(SDIR)\/vis.o $(SDIR)\/$(NAME).o $(SDIR)\/$(NAME)_par.o$/;"	m
OBJ_PAR	Makefile	/^OBJ_PAR = $(SDIR)\/main.o $(SDIR)\/db.o $(SDIR)\/vis.o $(SDIR)\/$(NAME).o $(SDIR)\/$(NAME)_par.o$/;"	m
OBJ_SEQ	Makefile	/^OBJ_SEQ = $(SDIR)\/main.o $(SDIR)\/db.o $(SDIR)\/vis.o $(SDIR)\/$(NAME).o $(SDIR)\/$(NAME)_seq.o$/;"	m
OBJ_UNIT	Makefile	/^OBJ_UNIT = $(SDIR)\/unit_test.o $(SDIR)\/db.o $(SDIR)\/vis.o $(SDIR)\/$(NAME).o $(SDIR)\/$(NAME)_par.o $(SDIR)\/$(NAME)_ref.o$/;"	m
PARTLY_WITHIN	sqlite3.h	7534;"	d
SDIR	Makefile	/^SDIR = student$/;"	m
SQLITE3_TEXT	sqlite3.h	3788;"	d
SQLITE_ABORT	sqlite3.h	403;"	d
SQLITE_ABORT_ROLLBACK	sqlite3.h	486;"	d
SQLITE_ACCESS_EXISTS	sqlite3.h	1204;"	d
SQLITE_ACCESS_READ	sqlite3.h	1206;"	d
SQLITE_ACCESS_READWRITE	sqlite3.h	1205;"	d
SQLITE_ALTER_TABLE	sqlite3.h	2581;"	d
SQLITE_ANALYZE	sqlite3.h	2583;"	d
SQLITE_ANY	sqlite3.h	4155;"	d
SQLITE_API	sqlite3.h	53;"	d
SQLITE_ATTACH	sqlite3.h	2579;"	d
SQLITE_AUTH	sqlite3.h	422;"	d
SQLITE_AUTH_USER	sqlite3.h	500;"	d
SQLITE_BLOB	sqlite3.h	3781;"	d
SQLITE_BUSY	sqlite3.h	404;"	d
SQLITE_BUSY_RECOVERY	sqlite3.h	475;"	d
SQLITE_BUSY_SNAPSHOT	sqlite3.h	476;"	d
SQLITE_CANTOPEN	sqlite3.h	413;"	d
SQLITE_CANTOPEN_CONVPATH	sqlite3.h	480;"	d
SQLITE_CANTOPEN_FULLPATH	sqlite3.h	479;"	d
SQLITE_CANTOPEN_ISDIR	sqlite3.h	478;"	d
SQLITE_CANTOPEN_NOTEMPDIR	sqlite3.h	477;"	d
SQLITE_CHECKPOINT_FULL	sqlite3.h	7324;"	d
SQLITE_CHECKPOINT_PASSIVE	sqlite3.h	7323;"	d
SQLITE_CHECKPOINT_RESTART	sqlite3.h	7325;"	d
SQLITE_CONFIG_COVERING_INDEX_SCAN	sqlite3.h	1747;"	d
SQLITE_CONFIG_GETMALLOC	sqlite3.h	1732;"	d
SQLITE_CONFIG_GETMUTEX	sqlite3.h	1738;"	d
SQLITE_CONFIG_GETPCACHE	sqlite3.h	1742;"	d
SQLITE_CONFIG_GETPCACHE2	sqlite3.h	1746;"	d
SQLITE_CONFIG_HEAP	sqlite3.h	1735;"	d
SQLITE_CONFIG_LOG	sqlite3.h	1743;"	d
SQLITE_CONFIG_LOOKASIDE	sqlite3.h	1740;"	d
SQLITE_CONFIG_MALLOC	sqlite3.h	1731;"	d
SQLITE_CONFIG_MEMSTATUS	sqlite3.h	1736;"	d
SQLITE_CONFIG_MMAP_SIZE	sqlite3.h	1749;"	d
SQLITE_CONFIG_MULTITHREAD	sqlite3.h	1729;"	d
SQLITE_CONFIG_MUTEX	sqlite3.h	1737;"	d
SQLITE_CONFIG_PAGECACHE	sqlite3.h	1734;"	d
SQLITE_CONFIG_PCACHE	sqlite3.h	1741;"	d
SQLITE_CONFIG_PCACHE2	sqlite3.h	1745;"	d
SQLITE_CONFIG_SCRATCH	sqlite3.h	1733;"	d
SQLITE_CONFIG_SERIALIZED	sqlite3.h	1730;"	d
SQLITE_CONFIG_SINGLETHREAD	sqlite3.h	1728;"	d
SQLITE_CONFIG_SQLLOG	sqlite3.h	1748;"	d
SQLITE_CONFIG_URI	sqlite3.h	1744;"	d
SQLITE_CONFIG_WIN32_HEAPSIZE	sqlite3.h	1750;"	d
SQLITE_CONSTRAINT	sqlite3.h	418;"	d
SQLITE_CONSTRAINT_CHECK	sqlite3.h	487;"	d
SQLITE_CONSTRAINT_COMMITHOOK	sqlite3.h	488;"	d
SQLITE_CONSTRAINT_FOREIGNKEY	sqlite3.h	489;"	d
SQLITE_CONSTRAINT_FUNCTION	sqlite3.h	490;"	d
SQLITE_CONSTRAINT_NOTNULL	sqlite3.h	491;"	d
SQLITE_CONSTRAINT_PRIMARYKEY	sqlite3.h	492;"	d
SQLITE_CONSTRAINT_ROWID	sqlite3.h	496;"	d
SQLITE_CONSTRAINT_TRIGGER	sqlite3.h	493;"	d
SQLITE_CONSTRAINT_UNIQUE	sqlite3.h	494;"	d
SQLITE_CONSTRAINT_VTAB	sqlite3.h	495;"	d
SQLITE_COPY	sqlite3.h	2588;"	d
SQLITE_CORRUPT	sqlite3.h	410;"	d
SQLITE_CORRUPT_VTAB	sqlite3.h	481;"	d
SQLITE_CREATE_INDEX	sqlite3.h	2556;"	d
SQLITE_CREATE_TABLE	sqlite3.h	2557;"	d
SQLITE_CREATE_TEMP_INDEX	sqlite3.h	2558;"	d
SQLITE_CREATE_TEMP_TABLE	sqlite3.h	2559;"	d
SQLITE_CREATE_TEMP_TRIGGER	sqlite3.h	2560;"	d
SQLITE_CREATE_TEMP_VIEW	sqlite3.h	2561;"	d
SQLITE_CREATE_TRIGGER	sqlite3.h	2562;"	d
SQLITE_CREATE_VIEW	sqlite3.h	2563;"	d
SQLITE_CREATE_VTABLE	sqlite3.h	2584;"	d
SQLITE_DBCONFIG_ENABLE_FKEY	sqlite3.h	1811;"	d
SQLITE_DBCONFIG_ENABLE_TRIGGER	sqlite3.h	1812;"	d
SQLITE_DBCONFIG_LOOKASIDE	sqlite3.h	1810;"	d
SQLITE_DBSTATUS_CACHE_HIT	sqlite3.h	6465;"	d
SQLITE_DBSTATUS_CACHE_MISS	sqlite3.h	6466;"	d
SQLITE_DBSTATUS_CACHE_USED	sqlite3.h	6459;"	d
SQLITE_DBSTATUS_CACHE_WRITE	sqlite3.h	6467;"	d
SQLITE_DBSTATUS_DEFERRED_FKS	sqlite3.h	6468;"	d
SQLITE_DBSTATUS_LOOKASIDE_HIT	sqlite3.h	6462;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	sqlite3.h	6464;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	sqlite3.h	6463;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	sqlite3.h	6458;"	d
SQLITE_DBSTATUS_MAX	sqlite3.h	6469;"	d
SQLITE_DBSTATUS_SCHEMA_USED	sqlite3.h	6460;"	d
SQLITE_DBSTATUS_STMT_USED	sqlite3.h	6461;"	d
SQLITE_DELETE	sqlite3.h	2564;"	d
SQLITE_DENY	sqlite3.h	2533;"	d
SQLITE_DEPRECATED	sqlite3.h	70;"	d
SQLITE_DETACH	sqlite3.h	2580;"	d
SQLITE_DETERMINISTIC	sqlite3.h	4166;"	d
SQLITE_DONE	sqlite3.h	429;"	d
SQLITE_DROP_INDEX	sqlite3.h	2565;"	d
SQLITE_DROP_TABLE	sqlite3.h	2566;"	d
SQLITE_DROP_TEMP_INDEX	sqlite3.h	2567;"	d
SQLITE_DROP_TEMP_TABLE	sqlite3.h	2568;"	d
SQLITE_DROP_TEMP_TRIGGER	sqlite3.h	2569;"	d
SQLITE_DROP_TEMP_VIEW	sqlite3.h	2570;"	d
SQLITE_DROP_TRIGGER	sqlite3.h	2571;"	d
SQLITE_DROP_VIEW	sqlite3.h	2572;"	d
SQLITE_DROP_VTABLE	sqlite3.h	2585;"	d
SQLITE_EMPTY	sqlite3.h	415;"	d
SQLITE_ERROR	sqlite3.h	400;"	d
SQLITE_EXPERIMENTAL	sqlite3.h	71;"	d
SQLITE_EXTERN	sqlite3.h	49;"	d
SQLITE_FAIL	sqlite3.h	7410;"	d
SQLITE_FCNTL_BUSYHANDLER	sqlite3.h	965;"	d
SQLITE_FCNTL_CHUNK_SIZE	sqlite3.h	956;"	d
SQLITE_FCNTL_COMMIT_PHASETWO	sqlite3.h	971;"	d
SQLITE_FCNTL_FILE_POINTER	sqlite3.h	957;"	d
SQLITE_FCNTL_HAS_MOVED	sqlite3.h	969;"	d
SQLITE_FCNTL_LOCKSTATE	sqlite3.h	951;"	d
SQLITE_FCNTL_MMAP_SIZE	sqlite3.h	967;"	d
SQLITE_FCNTL_OVERWRITE	sqlite3.h	961;"	d
SQLITE_FCNTL_PERSIST_WAL	sqlite3.h	960;"	d
SQLITE_FCNTL_POWERSAFE_OVERWRITE	sqlite3.h	963;"	d
SQLITE_FCNTL_PRAGMA	sqlite3.h	964;"	d
SQLITE_FCNTL_SIZE_HINT	sqlite3.h	955;"	d
SQLITE_FCNTL_SYNC	sqlite3.h	970;"	d
SQLITE_FCNTL_SYNC_OMITTED	sqlite3.h	958;"	d
SQLITE_FCNTL_TEMPFILENAME	sqlite3.h	966;"	d
SQLITE_FCNTL_TRACE	sqlite3.h	968;"	d
SQLITE_FCNTL_VFSNAME	sqlite3.h	962;"	d
SQLITE_FCNTL_WIN32_AV_RETRY	sqlite3.h	959;"	d
SQLITE_FCNTL_WIN32_SET_HANDLE	sqlite3.h	972;"	d
SQLITE_FLOAT	sqlite3.h	3780;"	d
SQLITE_FORMAT	sqlite3.h	423;"	d
SQLITE_FULL	sqlite3.h	412;"	d
SQLITE_FUNCTION	sqlite3.h	2586;"	d
SQLITE_GET_LOCKPROXYFILE	sqlite3.h	952;"	d
SQLITE_IGNORE	sqlite3.h	2534;"	d
SQLITE_INDEX_CONSTRAINT_EQ	sqlite3.h	5488;"	d
SQLITE_INDEX_CONSTRAINT_GE	sqlite3.h	5492;"	d
SQLITE_INDEX_CONSTRAINT_GT	sqlite3.h	5489;"	d
SQLITE_INDEX_CONSTRAINT_LE	sqlite3.h	5490;"	d
SQLITE_INDEX_CONSTRAINT_LT	sqlite3.h	5491;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	sqlite3.h	5493;"	d
SQLITE_INSERT	sqlite3.h	2573;"	d
SQLITE_INTEGER	sqlite3.h	3779;"	d
SQLITE_INTERNAL	sqlite3.h	401;"	d
SQLITE_INTERRUPT	sqlite3.h	408;"	d
SQLITE_IOCAP_ATOMIC	sqlite3.h	560;"	d
SQLITE_IOCAP_ATOMIC16K	sqlite3.h	566;"	d
SQLITE_IOCAP_ATOMIC1K	sqlite3.h	562;"	d
SQLITE_IOCAP_ATOMIC2K	sqlite3.h	563;"	d
SQLITE_IOCAP_ATOMIC32K	sqlite3.h	567;"	d
SQLITE_IOCAP_ATOMIC4K	sqlite3.h	564;"	d
SQLITE_IOCAP_ATOMIC512	sqlite3.h	561;"	d
SQLITE_IOCAP_ATOMIC64K	sqlite3.h	568;"	d
SQLITE_IOCAP_ATOMIC8K	sqlite3.h	565;"	d
SQLITE_IOCAP_IMMUTABLE	sqlite3.h	573;"	d
SQLITE_IOCAP_POWERSAFE_OVERWRITE	sqlite3.h	572;"	d
SQLITE_IOCAP_SAFE_APPEND	sqlite3.h	569;"	d
SQLITE_IOCAP_SEQUENTIAL	sqlite3.h	570;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	sqlite3.h	571;"	d
SQLITE_IOERR	sqlite3.h	409;"	d
SQLITE_IOERR_ACCESS	sqlite3.h	460;"	d
SQLITE_IOERR_BLOCKED	sqlite3.h	458;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	sqlite3.h	461;"	d
SQLITE_IOERR_CLOSE	sqlite3.h	463;"	d
SQLITE_IOERR_CONVPATH	sqlite3.h	473;"	d
SQLITE_IOERR_DELETE	sqlite3.h	457;"	d
SQLITE_IOERR_DELETE_NOENT	sqlite3.h	470;"	d
SQLITE_IOERR_DIR_CLOSE	sqlite3.h	464;"	d
SQLITE_IOERR_DIR_FSYNC	sqlite3.h	452;"	d
SQLITE_IOERR_FSTAT	sqlite3.h	454;"	d
SQLITE_IOERR_FSYNC	sqlite3.h	451;"	d
SQLITE_IOERR_GETTEMPPATH	sqlite3.h	472;"	d
SQLITE_IOERR_LOCK	sqlite3.h	462;"	d
SQLITE_IOERR_MMAP	sqlite3.h	471;"	d
SQLITE_IOERR_NOMEM	sqlite3.h	459;"	d
SQLITE_IOERR_RDLOCK	sqlite3.h	456;"	d
SQLITE_IOERR_READ	sqlite3.h	448;"	d
SQLITE_IOERR_SEEK	sqlite3.h	469;"	d
SQLITE_IOERR_SHMLOCK	sqlite3.h	467;"	d
SQLITE_IOERR_SHMMAP	sqlite3.h	468;"	d
SQLITE_IOERR_SHMOPEN	sqlite3.h	465;"	d
SQLITE_IOERR_SHMSIZE	sqlite3.h	466;"	d
SQLITE_IOERR_SHORT_READ	sqlite3.h	449;"	d
SQLITE_IOERR_TRUNCATE	sqlite3.h	453;"	d
SQLITE_IOERR_UNLOCK	sqlite3.h	455;"	d
SQLITE_IOERR_WRITE	sqlite3.h	450;"	d
SQLITE_LAST_ERRNO	sqlite3.h	954;"	d
SQLITE_LIMIT_ATTACHED	sqlite3.h	3115;"	d
SQLITE_LIMIT_COLUMN	sqlite3.h	3110;"	d
SQLITE_LIMIT_COMPOUND_SELECT	sqlite3.h	3112;"	d
SQLITE_LIMIT_EXPR_DEPTH	sqlite3.h	3111;"	d
SQLITE_LIMIT_FUNCTION_ARG	sqlite3.h	3114;"	d
SQLITE_LIMIT_LENGTH	sqlite3.h	3108;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	sqlite3.h	3116;"	d
SQLITE_LIMIT_SQL_LENGTH	sqlite3.h	3109;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	sqlite3.h	3118;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	sqlite3.h	3117;"	d
SQLITE_LIMIT_VDBE_OP	sqlite3.h	3113;"	d
SQLITE_LIMIT_WORKER_THREADS	sqlite3.h	3119;"	d
SQLITE_LOCKED	sqlite3.h	405;"	d
SQLITE_LOCKED_SHAREDCACHE	sqlite3.h	474;"	d
SQLITE_LOCK_EXCLUSIVE	sqlite3.h	586;"	d
SQLITE_LOCK_NONE	sqlite3.h	582;"	d
SQLITE_LOCK_PENDING	sqlite3.h	585;"	d
SQLITE_LOCK_RESERVED	sqlite3.h	584;"	d
SQLITE_LOCK_SHARED	sqlite3.h	583;"	d
SQLITE_MISMATCH	sqlite3.h	419;"	d
SQLITE_MISUSE	sqlite3.h	420;"	d
SQLITE_MUTEX_FAST	sqlite3.h	6107;"	d
SQLITE_MUTEX_RECURSIVE	sqlite3.h	6108;"	d
SQLITE_MUTEX_STATIC_APP1	sqlite3.h	6117;"	d
SQLITE_MUTEX_STATIC_APP2	sqlite3.h	6118;"	d
SQLITE_MUTEX_STATIC_APP3	sqlite3.h	6119;"	d
SQLITE_MUTEX_STATIC_LRU	sqlite3.h	6114;"	d
SQLITE_MUTEX_STATIC_LRU2	sqlite3.h	6115;"	d
SQLITE_MUTEX_STATIC_MASTER	sqlite3.h	6109;"	d
SQLITE_MUTEX_STATIC_MEM	sqlite3.h	6110;"	d
SQLITE_MUTEX_STATIC_MEM2	sqlite3.h	6111;"	d
SQLITE_MUTEX_STATIC_OPEN	sqlite3.h	6112;"	d
SQLITE_MUTEX_STATIC_PMEM	sqlite3.h	6116;"	d
SQLITE_MUTEX_STATIC_PRNG	sqlite3.h	6113;"	d
SQLITE_NOLFS	sqlite3.h	421;"	d
SQLITE_NOMEM	sqlite3.h	406;"	d
SQLITE_NOTADB	sqlite3.h	425;"	d
SQLITE_NOTFOUND	sqlite3.h	411;"	d
SQLITE_NOTICE	sqlite3.h	426;"	d
SQLITE_NOTICE_RECOVER_ROLLBACK	sqlite3.h	498;"	d
SQLITE_NOTICE_RECOVER_WAL	sqlite3.h	497;"	d
SQLITE_NULL	sqlite3.h	3782;"	d
SQLITE_OK	sqlite3.h	398;"	d
SQLITE_OPEN_AUTOPROXY	sqlite3.h	514;"	d
SQLITE_OPEN_CREATE	sqlite3.h	511;"	d
SQLITE_OPEN_DELETEONCLOSE	sqlite3.h	512;"	d
SQLITE_OPEN_EXCLUSIVE	sqlite3.h	513;"	d
SQLITE_OPEN_FULLMUTEX	sqlite3.h	525;"	d
SQLITE_OPEN_MAIN_DB	sqlite3.h	517;"	d
SQLITE_OPEN_MAIN_JOURNAL	sqlite3.h	520;"	d
SQLITE_OPEN_MASTER_JOURNAL	sqlite3.h	523;"	d
SQLITE_OPEN_MEMORY	sqlite3.h	516;"	d
SQLITE_OPEN_NOMUTEX	sqlite3.h	524;"	d
SQLITE_OPEN_PRIVATECACHE	sqlite3.h	527;"	d
SQLITE_OPEN_READONLY	sqlite3.h	509;"	d
SQLITE_OPEN_READWRITE	sqlite3.h	510;"	d
SQLITE_OPEN_SHAREDCACHE	sqlite3.h	526;"	d
SQLITE_OPEN_SUBJOURNAL	sqlite3.h	522;"	d
SQLITE_OPEN_TEMP_DB	sqlite3.h	518;"	d
SQLITE_OPEN_TEMP_JOURNAL	sqlite3.h	521;"	d
SQLITE_OPEN_TRANSIENT_DB	sqlite3.h	519;"	d
SQLITE_OPEN_URI	sqlite3.h	515;"	d
SQLITE_OPEN_WAL	sqlite3.h	528;"	d
SQLITE_PERM	sqlite3.h	402;"	d
SQLITE_PRAGMA	sqlite3.h	2574;"	d
SQLITE_PROTOCOL	sqlite3.h	414;"	d
SQLITE_RANGE	sqlite3.h	424;"	d
SQLITE_READ	sqlite3.h	2575;"	d
SQLITE_READONLY	sqlite3.h	407;"	d
SQLITE_READONLY_CANTLOCK	sqlite3.h	483;"	d
SQLITE_READONLY_DBMOVED	sqlite3.h	485;"	d
SQLITE_READONLY_RECOVERY	sqlite3.h	482;"	d
SQLITE_READONLY_ROLLBACK	sqlite3.h	484;"	d
SQLITE_RECURSIVE	sqlite3.h	2589;"	d
SQLITE_REINDEX	sqlite3.h	2582;"	d
SQLITE_REPLACE	sqlite3.h	7412;"	d
SQLITE_ROLLBACK	sqlite3.h	7408;"	d
SQLITE_ROW	sqlite3.h	428;"	d
SQLITE_SAVEPOINT	sqlite3.h	2587;"	d
SQLITE_SCHEMA	sqlite3.h	416;"	d
SQLITE_SELECT	sqlite3.h	2576;"	d
SQLITE_SET_LOCKPROXYFILE	sqlite3.h	953;"	d
SQLITE_SHM_EXCLUSIVE	sqlite3.h	1233;"	d
SQLITE_SHM_LOCK	sqlite3.h	1231;"	d
SQLITE_SHM_NLOCK	sqlite3.h	1243;"	d
SQLITE_SHM_SHARED	sqlite3.h	1232;"	d
SQLITE_SHM_UNLOCK	sqlite3.h	1230;"	d
SQLITE_SOURCE_ID	sqlite3.h	112;"	d
SQLITE_STATIC	sqlite3.h	4384;"	d
SQLITE_STATUS_MALLOC_COUNT	sqlite3.h	6342;"	d
SQLITE_STATUS_MALLOC_SIZE	sqlite3.h	6338;"	d
SQLITE_STATUS_MEMORY_USED	sqlite3.h	6333;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	sqlite3.h	6335;"	d
SQLITE_STATUS_PAGECACHE_SIZE	sqlite3.h	6340;"	d
SQLITE_STATUS_PAGECACHE_USED	sqlite3.h	6334;"	d
SQLITE_STATUS_PARSER_STACK	sqlite3.h	6339;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	sqlite3.h	6337;"	d
SQLITE_STATUS_SCRATCH_SIZE	sqlite3.h	6341;"	d
SQLITE_STATUS_SCRATCH_USED	sqlite3.h	6336;"	d
SQLITE_STMTSTATUS_AUTOINDEX	sqlite3.h	6536;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	sqlite3.h	6534;"	d
SQLITE_STMTSTATUS_SORT	sqlite3.h	6535;"	d
SQLITE_STMTSTATUS_VM_STEP	sqlite3.h	6537;"	d
SQLITE_SYNC_DATAONLY	sqlite3.h	616;"	d
SQLITE_SYNC_FULL	sqlite3.h	615;"	d
SQLITE_SYNC_NORMAL	sqlite3.h	614;"	d
SQLITE_TESTCTRL_ALWAYS	sqlite3.h	6205;"	d
SQLITE_TESTCTRL_ASSERT	sqlite3.h	6204;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	sqlite3.h	6202;"	d
SQLITE_TESTCTRL_BITVEC_TEST	sqlite3.h	6200;"	d
SQLITE_TESTCTRL_BYTEORDER	sqlite3.h	6214;"	d
SQLITE_TESTCTRL_EXPLAIN_STMT	sqlite3.h	6211;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	sqlite3.h	6201;"	d
SQLITE_TESTCTRL_FIRST	sqlite3.h	6196;"	d
SQLITE_TESTCTRL_ISINIT	sqlite3.h	6215;"	d
SQLITE_TESTCTRL_ISKEYWORD	sqlite3.h	6208;"	d
SQLITE_TESTCTRL_LAST	sqlite3.h	6217;"	d
SQLITE_TESTCTRL_LOCALTIME_FAULT	sqlite3.h	6210;"	d
SQLITE_TESTCTRL_NEVER_CORRUPT	sqlite3.h	6212;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	sqlite3.h	6207;"	d
SQLITE_TESTCTRL_PENDING_BYTE	sqlite3.h	6203;"	d
SQLITE_TESTCTRL_PRNG_RESET	sqlite3.h	6199;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	sqlite3.h	6198;"	d
SQLITE_TESTCTRL_PRNG_SAVE	sqlite3.h	6197;"	d
SQLITE_TESTCTRL_RESERVE	sqlite3.h	6206;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	sqlite3.h	6209;"	d
SQLITE_TESTCTRL_SORTER_MMAP	sqlite3.h	6216;"	d
SQLITE_TESTCTRL_VDBE_COVERAGE	sqlite3.h	6213;"	d
SQLITE_TEXT	sqlite3.h	3784;"	d
SQLITE_TEXT	sqlite3.h	3786;"	d
SQLITE_TOOBIG	sqlite3.h	417;"	d
SQLITE_TRANSACTION	sqlite3.h	2577;"	d
SQLITE_TRANSIENT	sqlite3.h	4385;"	d
SQLITE_UPDATE	sqlite3.h	2578;"	d
SQLITE_UTF16	sqlite3.h	4154;"	d
SQLITE_UTF16BE	sqlite3.h	4153;"	d
SQLITE_UTF16LE	sqlite3.h	4152;"	d
SQLITE_UTF16_ALIGNED	sqlite3.h	4156;"	d
SQLITE_UTF8	sqlite3.h	4151;"	d
SQLITE_VERSION	sqlite3.h	110;"	d
SQLITE_VERSION	sqlite3.h	77;"	d
SQLITE_VERSION_NUMBER	sqlite3.h	111;"	d
SQLITE_VERSION_NUMBER	sqlite3.h	80;"	d
SQLITE_VTAB_CONSTRAINT_SUPPORT	sqlite3.h	7382;"	d
SQLITE_WARNING	sqlite3.h	427;"	d
SQLITE_WARNING_AUTOINDEX	sqlite3.h	499;"	d
SRC	Makefile	/^SRC = $(wildcard *.c) $(wildcard *\/*.c)$/;"	m
VIS_H	vis.h	2;"	d
VPATH	Makefile	/^VPATH = $(SDIR)$/;"	m
_SQLITE3RTREE_H_	sqlite3.h	7443;"	d
_SQLITE3_H_	sqlite3.h	34;"	d
aConstraint	sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint
aConstraintUsage	sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage
aCoord	sqlite3.h	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info
aOrderBy	sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby
aParam	sqlite3.h	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info
aParam	sqlite3.h	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry
anQueue	sqlite3.h	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info
argvIndex	sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
closeDB	db.c	/^void closeDB() {$/;"	f
desc	sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
difference	db.h	/^  int difference;$/;"	m	struct:__anon2
double	sqlite3.h	264;"	d
double	sqlite3.h	7421;"	d
draw	db.h	/^  int draw;$/;"	m	struct:__anon2
eParentWithin	sqlite3.h	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info
eWithin	sqlite3.h	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info
estimatedCost	sqlite3.h	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info
estimatedRows	sqlite3.h	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info
false	emsim.h	11;"	d
fillPlayer	db.c	/^void fillPlayer(player_t* player) {$/;"	f
finalRound	db.h	/^  int finalRound;$/;"	m	struct:__anon3
final_pos	emsim.c	/^int final_pos (int numGames){$/;"	f
gameNum	emsim.c	/^static int gameNum[NUMGROUPS];$/;"	v	file:
games	db.h	/^  int games;$/;"	m	struct:__anon1
games	db.h	/^  int games;$/;"	m	struct:__anon2
gamesFinal	db.h	/^  int gamesFinal;$/;"	m	struct:__anon1
getConnection	db.c	/^int getConnection(sqlite3** conn) {$/;"	f
getGoalsPerGame	emsim.c	/^double getGoalsPerGame(const player_t* players, int numPlayers) {$/;"	f
getMatches	db.c	/^void getMatches(team_t* team1, team_t* team2,$/;"	f
getMatchesInternal	db.c	/^void getMatchesInternal(team_t* team1, team_t* team2, int reverse,$/;"	f
getNumMatches	db.c	/^int getNumMatches(const char* team1, const char* team2) {$/;"	f
getNumPlayersOfMatch	db.c	/^int getNumPlayersOfMatch(const match_t* match, int team) {$/;"	f
getPlayersOfMatch	db.c	/^void getPlayersOfMatch(const match_t* match,$/;"	f
getPlayersOfMatchForTeam	db.c	/^void getPlayersOfMatchForTeam(const match_t* match,$/;"	f
getTeam	db.c	/^void getTeam(const char* name, team_t* team) {$/;"	f
goals	db.h	/^  int goals;$/;"	m	struct:__anon1
goals	db.h	/^  int goals;$/;"	m	struct:__anon2
goals1	db.h	/^  int goals1;$/;"	m	struct:__anon3
goals1	emsim.h	/^  int goals1;$/;"	m	struct:__anon4
goals2	db.h	/^  int goals2;$/;"	m	struct:__anon3
goals2	emsim.h	/^  int goals2;$/;"	m	struct:__anon4
goalsFinal	db.h	/^  int goalsFinal;$/;"	m	struct:__anon1
goalsGot	db.h	/^  int goalsGot;$/;"	m	struct:__anon2
goalsScored	db.h	/^  int goalsScored;$/;"	m	struct:__anon2
handleGame	vis.c	/^void handleGame(int index,$/;"	f
iColumn	sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
iColumn	sqlite3.h	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iLevel	sqlite3.h	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info
iRowid	sqlite3.h	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info
iTermOffset	sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iVersion	sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs
iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods
iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module
iVersion	sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2
id	db.h	/^  int id;$/;"	m	struct:__anon1
id	db.h	/^  int id;$/;"	m	struct:__anon2
id	db.h	/^  int id;$/;"	m	struct:__anon3
id1	db.h	/^  int id1;$/;"	m	struct:__anon3
id2	db.h	/^  int id2;$/;"	m	struct:__anon3
idxNum	sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info
idxStr	sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info
initDB	db.c	/^int initDB(char* filename) {$/;"	f
initialize	emsim.c	/^void initialize() {$/;"	f
lost	db.h	/^  int lost;$/;"	m	struct:__anon2
main	main.c	/^int main(int argc, char *argv[])$/;"	f
main	unit_test.c	/^int main(int argc, char **argv)$/;"	f
match_result	emsim.h	/^} match_result;$/;"	t	typeref:struct:__anon4
match_t	db.h	/^} match_t;$/;"	t	typeref:struct:__anon3
mode	Makefile	/^	mode = release$/;"	m
mxLevel	sqlite3.h	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info
mxPathname	sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs
nConstraint	sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info
nCoord	sqlite3.h	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info
nOrderBy	sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info
nParam	sqlite3.h	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info
nParam	sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry
nRef	sqlite3.h	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab
name	db.h	/^  char name[40];$/;"	m	struct:__anon2
name1	emsim.h	/^  char name1[40];$/;"	m	struct:__anon4
name2	emsim.h	/^  char name2[40];$/;"	m	struct:__anon4
needToFreeIdxStr	sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info
omit	sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
op	sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
openConnection	db.c	/^int openConnection(sqlite3** db) {$/;"	f
orderByConsumed	sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info
pAppData	sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods
pAppData	sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs
pArg	sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods
pArg	sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2
pBuf	sqlite3.h	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page
pContext	sqlite3.h	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info
pContext	sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry
pExtra	sqlite3.h	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page
pMethods	sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods
pModule	sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab
pNext	sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs
pUser	sqlite3.h	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info
pUser	sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry
pVtab	sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor
participations	db.h	/^  int participations;$/;"	m	struct:__anon2
playEM	emsim_seq.c	/^void playEM(team_t* teams, int numThreads) {$/;"	f
playEM	student/emsim_par.c	/^void playEM(team_t* teams, int numThreads)$/;"	f
playEM_ref	emsim_ref.c	/^void playEM_ref(team_t* teams)$/;"	f
playFinalMatch	emsim.c	/^void playFinalMatch(int numGames, int gameNo,$/;"	f
playFinalRound	emsim_seq.c	/^void playFinalRound(int numGames, team_t** teams, team_t** successors) {$/;"	f
playFinalRound	student/emsim_par.c	/^void playFinalRound(int numGames, team_t** teams, team_t** successors)$/;"	f
playFinalRound_ref	emsim_ref.c	/^void playFinalRound_ref(int numGames, team_t** teams, team_t** successors)$/;"	f
playGroup	emsim.c	/^void playGroup(int groupNo, team_t* teams, int numTeams,$/;"	f
playGroupMatch	emsim.c	/^void playGroupMatch(int groupNo,$/;"	f
playMatchGen	emsim.c	/^void playMatchGen(team_t* team1, team_t* team2, int* goals1, int* goals2) {$/;"	f
playPenalty	emsim.c	/^void playPenalty(team_t* team1, team_t* team2,$/;"	f
player_t	db.h	/^} player_t;$/;"	t	typeref:struct:__anon1
points	db.h	/^  int points;$/;"	m	struct:__anon2
rParentScore	sqlite3.h	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info
rScore	sqlite3.h	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info
results	emsim.h	/^match_result* results;$/;"	v
sortTeams	emsim.c	/^void sortTeams(int numTeams, team_t** teams) {$/;"	f
sqlite3	sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3_backup	sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_blob	sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_callback	sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t
sqlite3_context	sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_data_directory	sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;$/;"	v
sqlite3_destructor_type	sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t
sqlite3_file	sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_index_constraint	sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_info	sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_orderby	sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_int64	sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t
sqlite3_io_methods	sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_mem_methods	sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_module	sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_mutex	sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex_methods	sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_pcache	sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache_methods	sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_pcache_methods2	sqlite3.h	/^struct sqlite3_pcache_methods2 {$/;"	s
sqlite3_pcache_methods2	sqlite3.h	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2
sqlite3_pcache_page	sqlite3.h	/^struct sqlite3_pcache_page {$/;"	s
sqlite3_pcache_page	sqlite3.h	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page
sqlite3_rtree_dbl	sqlite3.h	/^  typedef double sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_dbl	sqlite3.h	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_geometry	sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry
sqlite3_rtree_query_info	sqlite3.h	/^struct sqlite3_rtree_query_info {$/;"	s
sqlite3_rtree_query_info	sqlite3.h	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info
sqlite3_stmt	sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_syscall_ptr	sqlite3.h	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t
sqlite3_temp_directory	sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v
sqlite3_uint64	sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t
sqlite3_value	sqlite3.h	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem
sqlite3_version	sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v
sqlite3_vfs	sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vtab	sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab_cursor	sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite_int64	sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t
sqlite_int64	sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t
sqlite_int64	sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t
sqlite_uint64	sqlite3.h	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t
sqlite_uint64	sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t
swapTeams	emsim.c	/^void swapTeams(team_t** team1, team_t** team2) {$/;"	f
szOsFile	sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs
team1DominatesTeam2	emsim.c	/^int team1DominatesTeam2(team_t* team1, team_t* team2)$/;"	f
team_t	db.h	/^} team_t;$/;"	t	typeref:struct:__anon2
true	emsim.h	10;"	d
usable	sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
visualize	vis.c	/^void visualize(int pos, int numMatches){$/;"	f
visualizeEM	vis.c	/^void visualizeEM() {$/;"	f
won	db.h	/^  int won;$/;"	m	struct:__anon2
xAccess	sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs
xBegin	sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xBestIndex	sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module
xCachesize	sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods
xCachesize	sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2
xCheckReservedLock	sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods
xClose	sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xClose	sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xColumn	sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module
xCommit	sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xConnect	sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods
xCreate	sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2
xCurrentTime	sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs
xCurrentTimeInt64	sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs
xDelUser	sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry
xDelUser	sqlite3.h	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info
xDelete	sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs
xDestroy	sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDestroy	sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xDestroy	sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xDeviceCharacteristics	sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xDisconnect	sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDlClose	sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs
xDlError	sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs
xDlOpen	sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs
xEof	sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xFetch	sqlite3.h	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods
xFetch	sqlite3.h	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2
xFetch	sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods
xFileControl	sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods
xFileSize	sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods
xFilter	sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module
xFindFunction	sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module
xFree	sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods
xFullPathname	sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs
xGetLastError	sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs
xGetSystemCall	sqlite3.h	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xInit	sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xInit	sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods
xInit	sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xLock	sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xMalloc	sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods
xMutexAlloc	sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnd	sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnter	sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexFree	sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexHeld	sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexInit	sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexLeave	sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexNotheld	sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexTry	sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xNext	sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xNextSystemCall	sqlite3.h	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xOpen	sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs
xOpen	sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module
xPagecount	sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xPagecount	sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xRandomness	sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs
xRead	sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xRealloc	sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xRekey	sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2
xRekey	sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods
xRelease	sqlite3.h	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRename	sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module
xRollback	sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xRollbackTo	sqlite3.h	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRoundup	sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods
xRowid	sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module
xSavepoint	sqlite3.h	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xSectorSize	sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xSetSystemCall	sqlite3.h	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs
xShmBarrier	sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xShmLock	sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods
xShmMap	sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods
xShmUnmap	sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods
xShrink	sqlite3.h	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods
xShutdown	sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xSize	sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xSleep	sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs
xSync	sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods
xSync	sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xTruncate	sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods
xTruncate	sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods
xTruncate	sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2
xUnfetch	sqlite3.h	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods
xUnlock	sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xUnpin	sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2
xUnpin	sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods
xUpdate	sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module
xWrite	sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
year	db.h	/^  int year;$/;"	m	struct:__anon3
zErrMsg	sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab
zName	sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs
