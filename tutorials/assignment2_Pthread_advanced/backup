#include "emsim.h"
#include <pthread.h>

pthread_cond_t empty = PTHREAD_COND_INITIALIZER, 
       fill =  PTHREAD_COND_INITIALIZER;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

typedef struct pthread_arguments
{
   int groupNo;
   team_t* teams;
   int count;
}pthread_args;


//each thread will call this function
void * producer(void *ptr)
{
   int cNumTeamsPerGroup = NUMTEAMS / NUMGROUPS;
   int i, j, goalsI=0, goalsJ=0;
   pthread_args *var = (pthread_args *)ptr;
   int g = var->groupNo;
   team_t* teams = var->teams;

   for (i =  g * cNumTeamsPerGroup; i < (g+1) * cNumTeamsPerGroup; ++i) {
      for (j = (g+1) * cNumTeamsPerGroup - 1; j > i; --j) {

           //pthread_mutex_lock(&mutex);
           playGroupMatch(g, teams + i, teams + j, &goalsI, &goalsJ);

           teams[i].goals += goalsI - goalsJ;
           teams[j].goals += goalsJ - goalsI;
           if (goalsI > goalsJ)
    	       teams[i].points += 3;
           else if (goalsI < goalsJ)
	       teams[j].points += 3;
           else {
	       teams[i].points += 1;
               teams[j].points += 1;
           }

	   //pthread_mutex_unlock(&mutex);
      }
   }
   return NULL;
}

void playGroups(team_t* teams, int numWorker)
{
 // put your code here
 
  int g;

  //thread stuffs
  pthread_t thread[NUMGROUPS];
  pthread_args vars[NUMGROUPS];

  for (g = 0; g < NUMGROUPS; g = g+2) {
       vars[g].groupNo = g;
       vars[g].teams = teams;
       vars[g].count = 6;
       pthread_create(&thread[g], NULL, &producer, &vars[g]);
  }
}

// play a specific final round by utilizing numWorker worker threads
void playFinalRound(int numGames, team_t** teams, team_t** successors, int numWorker)
{
 // put your code here
  team_t* team1;
  team_t* team2;
  int i, goals1 = 0, goals2 = 0;

  for (i = 0; i < numGames; ++i) {
    team1 = teams[i*2];
    team2 = teams[i*2+1];
    playFinalMatch(numGames, i, team1, team2, &goals1, &goals2);

    if (goals1 > goals2)
      successors[i] = team1;
    else if (goals1 < goals2)
      successors[i] = team2;
    else {
      playPenalty(team1, team2, &goals1, &goals2);
      if (goals1 > goals2)
        successors[i] = team1;
      else
        successors[i] = team2;
    }
  } 

} 
